<?xml version="1.0"?>
<package>
  <metadata>
    <id>Hangfire.InMemory</id>
    <version>%version%</version>
    <title>Hangfire In-Memory Storage</title>
    <authors>Sergey Odinokov</authors>
    <owners>HangfireIO, odinserj</owners>
    <projectUrl>https://github.com/HangfireIO/Hangfire.InMemory</projectUrl>
    <repository type="git" url="https://github.com/HangfireIO/Hangfire.InMemory.git" commit="%commit%" />
    <license type="file">LICENSE.md</license>
    <icon>icon.png</icon>
    <readme>README.md</readme>
    <description>In-memory job storage for Hangfire with an efficient implementation.</description>
    <copyright>Copyright © 2020-2024 Hangfire OÜ</copyright>
    <tags>Hangfire Storage In-Memory</tags>
    <releaseNotes>https://github.com/HangfireIO/Hangfire.InMemory/releases
0.11.0
• Changed – This version targets Hangfire 1.7.0 and don't support some of the newest features.
• Breaking – Remove the deprecated `DisableJobSerialization` option.
• Breaking – Change default value for the `IdType` option to `long`.

0.10.4
• Fixed – Problem with locks implementation due to a regression in .NET 8.0.

0.10.3
• Changed – Significantly optimize `GetFirstByLowestScoreFromSet` method overloads.

0.10.2
• Changed – Refactor command dispatching to make it more simple and less allocating.
• Changed – Straightforward locking implementation with more unit tests.
• Fixed – `InvalidOperationException` "Wrong level" when trying to release a lock (regression from 0.10.1).
• Fixed – "An item with the same key has already been added" on the Awaiting Jobs page (regression from 0.10.0).

0.10.1
• Changed – Roll back a breaking change in 0.10.0 for the `InMemoryStorageOptions` class.
• Changed – Increase the default eviction interval to 5 seconds.
• Changed – More efficient storage of state history records.
• Changed – Implement fast path for the `FetchNextJob` method.
• Fixed – More robust entry eviction implementation.
• Fixed – Graceful dispatcher shutdown without additional waiting.
• Project – Faster build pipeline on AppVeyor after migration to modern Powershell 7+.

0.10.0
• Breaking – `InMemoryStorageOptions` class instances are now immutable after initialization.
• Added – Support long-based job identifiers through the `InMemoryStorageOptions.IdType` property.
• Added – Expose the `InMemoryStorageOptions.CommandTimeout` option to control the command timeouts.
• Changed – Significantly improve query dispatching pipeline in terms of speed and allocations.
• Changed – More compact representation of jobs and their parameters.
• Changed – Optimise the `GetFirstByLowestScoreFromSet` query when the number of items is huge.
• Changed – Better concurrency handling implementation for the collection of locks.

0.9.0
• Added – Implement the disposable pattern for the `InMemoryStorage` class.
• Changed – Use more compact representation of job parameters and state data.
• Changed – Move to `SortedDictionary` and `LinkedList` to avoid using Large Object Heap.
• Changed – `TimeSpan.Zero` value for `MaxExpirationTime` now causes immediate entry eviction.
• Fixed – Ensure near-zero max expiration limit can't lead to uninitialized job eviction.
• Deprecated – `DisableJobSerialization` option is now obsolete, serialization is always enabled.

0.8.1
• Fixed – Incorrect validation in the `MaxStateHistoryLength` setter (by @DPschichholz).

0.8.0
• Project – Sign NuGet package and .NET assemblies on build with a company's own certificate.
• Project – Require package signature validation when restoring dependencies.
• Project – Add HangfireIO as an owner for the NuGet package.
• Project – Add readme file and icon to the NuGet package.
• Project – Fix Git repository URL in the NuGet package metadata.

0.7.0
• Added – `InMemoryStorageOptions.MaxExpirationTime` option to control the maximum expiration time.
• Changed – The default value for maximum expiration time is 2 hours now, not days.
• Fixed – Populate `ParametersSnapshot` and `InvocationData` properties in `IMonitoringApi.JobDetails`.
• Fixed – The "Awaiting Jobs" page now includes the state name of an antecedent background job.
• Fixed – The "Scheduled Jobs" page now has correct identifiers for jobs with explicit queues defined.
• Fixed – Unify job ordering in Monitoring API to be the same as in other storages.
• Project – Enable source link support with embedded symbols for simplified debugging.
• Project – Refactored internals and added even more unit tests.
• Project – Enable NuGet package restore with lock file and locked mode.
• Project – Project and Release Notes URLs in the NuGet package now point to the repository.
• Project – Enable tests running on the `net6.0` platform and Ubuntu on AppVeyor.

0.6.0
• Added – `InMemoryStorageOptions.MaxStateHistoryLength` option to control state entries.
• Changed – Always use monotonic clock when working with time.
• Changed – Release distributed locks when their connection is disposed.
• Changed – Pass dispatcher fault exceptions to a caller thread.
• Project – Refactor internal types to have a cleaner project structure and avoid mistakes.
• Project – Enable static analysis by the Microsoft.CodeAnalysis.NetAnalyzers package.
• Project – Enable portable PDBs for the .NET Framework 4.5.1 platform.

0.5.1
• Fixed – Infinite loop in recurring job scheduler consuming 100% CPU regression after 0.5.0.

0.5.0
• Added – `InMemoryStorageOptions.StringComparer` as a central option for key and index comparisons.

0.4.1
• Fixed – "Awaiting Jobs" metric is now correctly populated with `Version180` compatibility level.

0.4.0
• Breaking – Package now depends on Hangfire.Core version 1.8.0.
• Breaking – Replace the `net45` target with `net451` one as the former is not supported.

• Changed – Improve `GetFirstByLowestScoreFromSet` operations.
• Changed – Implement the `Job.Queue` feature.
• Changed – Implement the `Connection.GetUtcDateTime` feature.
• Changed – Implement the `Connection.GetSetContains` feature.
• Changed – Implement the `Connection.GetSetCount.Limited` feature.
• Changed – Implement the `Connection.BatchedGetFirstByLowestScoreFromSet` feature for the storage.
• Changed – Implement the `Transaction.AcquireDistributedLock` feature.
• Changed – Implement the `Transaction.CreateJob` feature.
• Changed – Implement the `Transaction.SetJobParameter` feature.
• Changed – Implement the new monitoring features.
• Changed – Populate the new properties in Monitoring API.
• Changed – Populate the `Retries` metric in the `GetStatistics` method.

0.3.7
• Fixed – Throw `BackgroundJobServerGoneException` outside of dispatcher thread.

0.3.6
• Fixed – Ensure lock entries are eventually removed from their collection.
• Fixed – Ensure lock entries are always updated under a monitor.

0.3.5
• Fixed – Ensure entries are expired even during constant storage pressure.

0.3.4
• Fixed – Reverse state list instead of sorting it by date in the `JobDetails` method.
• Fixed – Better sorting for state indexes, take into account job creation date.
• Fixed – Reverse succeeded and deleted job lists to match Redis implementation.

0.3.3
• Fixed – Sort queues and servers when returning them from monitoring api and in the Dashboard UI.

0.3.2
• Fixed – Enqueued jobs may become invisible when adding a lot of jobs simultaneously to a new queue.
• Fixed – Some workers are waiting for background jobs forever when several jobs added at once.
• Fixed – Workers are able to detect new background jobs only after another background job is processed.
• Fixed – Workers don't see background jobs when multiple queues are used with minimal workload.

0.3.1
• Fixed – `NullReferenceException` in the `SignalOneQueueWaitNode` method when using multiple queues.

0.3.0
• Added – `InMemoryStorageOptions.DisableJobSerialization` option.
• Fixed – `ObjectDisposedException` on semaphore when committing a transaction.
• Fixed – Gracefully handle `ObjectDisposedException` when signaling for query completion.
• Fixed – Avoid killing the whole process in case of an exception in dispatcher, stop it instead.
• Project – Add a lot of new unit tests for `InMemoryMonitoringApi` class.

0.2.0
• Fixed – A lot of corner cases revealed by unit tests.
• Project – Added a ton of unit tests for the top-level classes to ensure behavior is consistent.

0.1.0 – Initial release
</releaseNotes>
    <dependencies>
      <group targetFramework="net451">
        <dependency id="Hangfire.Core" version="1.7.0" />
      </group>
      <group targetFramework="netstandard2.0">
        <dependency id="Hangfire.Core" version="1.7.0" />
      </group>
    </dependencies>
  </metadata>
  <files>
    <file src="net451\Hangfire.InMemory.dll" target="lib\net451" />
    <file src="net451\Hangfire.InMemory.xml" target="lib\net451" />
    <file src="netstandard2.0\Hangfire.InMemory.dll" target="lib\netstandard2.0" />
    <file src="netstandard2.0\Hangfire.InMemory.xml" target="lib\netstandard2.0" />

    <file src="..\nuspecs\icon.png" />
    <file src="README.md" />

    <file src="LICENSE.md" />
    <file src="LICENSE_STANDARD" />
    <file src="LICENSE_ROYALTYFREE" />
    <file src="COPYING" />
    <file src="COPYING.LESSER" />
  </files>
</package>
